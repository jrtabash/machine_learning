In [4]: xl, xt, yl, yt = getDataForTesting(makeDowJonesColumns(week=False, stock=False, prices=False, volume=True, percent=True, derived=True), scale="minmax", components=None, filterSameD
   ...: irection=None)

In [5]: xl.head()
Out[5]: 
     volume  percent_change_price  percent_change_high  percent_change_low
0  0.158692              0.833841             0.714188            0.984027
1  0.160985              0.477092             0.000000            0.595491
2  0.088528              0.562050             0.147327            0.769789
3  0.097505              0.740355             0.601192            0.980097
4  0.099590              0.926730             0.938823            1.000000

In [6]: yl.head()
Out[6]: 
   percent_change_next_weeks_price
0                        -4.428490
1                        -2.470660
2                         1.638310
3                         5.933250
4                         0.230814

In [7]: sxl, syl = makeDowJonesSegments(xl.join(yl), 1, 3, xAggFtn=data_utils.makeSegRowAggFtn(np.mean, 4, 3), yAggFtn=data_utils.makeSegColAggFtn(np.mean, 4, 3))

In [8]: sxt, syt = makeDowJonesSegments(xt.join(yt), 1, 3, xAggFtn=data_utils.makeSegRowAggFtn(np.mean, 4, 3), yAggFtn=data_utils.makeSegColAggFtn(np.mean, 4, 3))

In [9]: sxl = pd.DataFrame(sxl, columns=xl.columns)

In [10]: syl = pd.DataFrame(syl, columns=yl.columns)

In [11]: sxt = pd.DataFrame(sxt, columns=sxl.columns)

In [12]: syt = pd.DataFrame(syt, columns=syl.columns)

In [13]: 

In [14]: model = findBestEstimator(sxl, syl, verbose=True, kernelRange=['poly', 'rbf'], degreeRange=[2, 3, 4, 5, 6], cRange=[0.5, 0.7, 0.9, 1.0, 1.1, 1.2], gammaRange=[0.00001, 0.0001, 0.0
    ...: 01, 0.01, 0.1, 0.5], epsilonRange=[0.005, 0.007, 0.009, 0.01, 0.05, 0.09], validate=True, scoring=misc_utils.makeProfitLossFtn())
findBestParams:
  scoring=make_scorer(profitScore, greater_is_better=False, calcSign=False)
  gammaRange=[1e-05, 0.0001, 0.001, 0.01, 0.1, 0.5]
  cRange=[0.5, 0.7, 0.9, 1.0, 1.1, 1.2]
  epsilonRange=[0.005, 0.007, 0.009, 0.01, 0.05, 0.09]
  kernelRange=['poly', 'rbf']
  coef0Range=[0.0]
  degreeRange=[2, 3, 4, 5, 6]
Fitting 3 folds for each of 2160 candidates, totalling 6480 fits
[Parallel(n_jobs=-1)]: Done 1900 tasks      | elapsed:    3.2s
[Parallel(n_jobs=-1)]: Done 6480 out of 6480 | elapsed:   10.1s finished
findBestParams: best_params={'C': 1.2, 'coef0': 0.0, 'degree': 2, 'epsilon': 0.01, 'gamma': 0.5, 'kernel': 'rbf'}
Estimator: SVR(C=1.2, cache_size=200, coef0=0.0, degree=2, epsilon=0.01, gamma=0.5,
  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)
 Validation Scores: [-0.21581571 -0.11514041 -0.01273597]
Validation Average: -0.11456403109074566

In [15]: misc_utils.profitScore(syl, model.predict(sxl))
Out[15]: 0.4803947529508497

In [16]: misc_utils.profitScore(syt, model.predict(sxt))
Out[16]: 0.007353034382421697

In [17]: from sklearn.metrics import r2_score, mean_squared_error

In [18]: r2_score(syt, model.predict(sxt))
Out[18]: 0.3283459101623265

In [19]: mean_squared_error(syt, model.predict(sxt))
Out[19]: 1.7805672085207378
